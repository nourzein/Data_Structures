{"changed":true,"filter":false,"title":"test2.js","tooltip":"/test/test2.js","value":"const { Client } = require('pg');\nconst dotenv = require('dotenv');\ndotenv.config();\nconst handlebars = require('handlebars')\nconst fs = require('fs')\nvar express = require('express'), // npm install express\n    app = express();\nvar path= require('path');\nvar bodyParser= require('body-parser')\n\nvar dir= __dirname;\n//Configure Photon\nvar device_id = process.env.PHOTON_ID;\nvar access_token = process.env.PHOTON_TOKEN;\nvar particle_variable = 'tempsensor';\nvar device_url = 'https://api.particle.io/v1/devices/' + device_id + '/' + particle_variable + '?access_token=' + access_token;\n    \n// AWS RDS POSTGRESQL INSTANCE\nvar db_credentials = new Object();\n    db_credentials.user = 'nour'; //your username\n    db_credentials.host = process.env.WEB_HOST; //your endpoint\n    db_credentials.database = 'aa';\n    db_credentials.password = process.env.POSTGPW; //password. use an environment variable \n    db_credentials.port = 5432; \n\n//DB CONFIG\nvar AWS = require('aws-sdk');\nAWS.config = new AWS.Config();\nAWS.config.region = \"us-east-2\";\nvar dynamodb = new AWS.DynamoDB();    \n\n\n//setup\n// app.engine('html', require('ejs').renderFile);\n// app.set('view engine', 'html');\napp.use(express.static(path.join(dir, '/public')));\napp.set('views', path.join(dir, 'public'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));â€©\n\n//route to render html file\napp.get('/aa', function(req, res) {\n    res.sendFile(dir +\"/public/aa.html\")\n    //res.render(\"aa.html\")\n});\n    \n//route to query data\napp.post('/aaData',  function(req, res) {\n    //res.send('<h3>this is the page for my sensor data</h3>');  \n    // Connect to the AWS RDS Postgres database\n// var templateVariables= {};\n\nconst client = new Client(db_credentials);\nclient.connect();\n\nvar queryDay= req.body.queryDay\n// var [from, to]=req.body.queryTime.split(\",\");\nvar queryTime= req.body.queryTime\n//queryTime= req.body.queryTime\n\n    var thisQuery = \"SELECT latitude, longitude, address, json_agg(json_build_object('Meeting Name', meetingname, 'Meeting Title', meetingtitle, 'Day', day, 'Start Time', starttime,  'End Time', endtime, 'Metting Type', meetingtype, 'Special Interest', specialinterest, 'Address', fulllocation)) as meetings FROM aaallmeetings JOIN aaallmeetinginstances ON aaallmeetings.locationid = aaallmeetinginstances.locationid WHERE (1=1) \" + queryDay +  queryTime + \" GROUP BY latitude, longitude, address;\";\n    client.query(thisQuery, (err, results) => {\n        if (err) {throw err}\n        else {\n            const data = results.rows;\n            console.log(data)\n              client.end();\n              return res.json(data);\n            // start leaflet js\n            // fs.readFile('./aa.hbs', 'utf8', (error, myData) => {\n            //     var template = handlebars.compile(myData, data)\n            //     // console.log(templateVariables)\n            //     templateVariables.blockofMeetings = data;\n            //     templateVariables.myData = JSON.stringify(data);\n            //     //console.log(templateVariables)\n            //     var html = template(templateVariables)\n            //     res.send(html)\n            // })\n        \n        }\n        \n    });\n});\n\n\napp.post('/aaMeetings',  function(req, res) {\n\nconst client = new Client(db_credentials);\nclient.connect();\n\n    var thisQuery = \"SELECT latitude, longitude, address, json_agg(json_build_object('Meeting Name', meetingname, 'Meeting Title', meetingtitle, 'Day', day, 'Start Time', starttime,  'End Time', endtime, 'Metting Type', meetingtype, 'Special Interest', specialinterest, 'Address', fulllocation)) as meetings FROM aaallmeetings JOIN aaallmeetinginstances ON aaallmeetings.locationid = aaallmeetinginstances.locationid WHERE (1=1) GROUP BY latitude, longitude, address;\";\n    client.query(thisQuery, (err, results) => {\n        if (err) {throw err}\n        else {\n            const data = results.rows;\n            // console.log(data)\n              client.end();\n              return res.json(data);\n        \n        }\n        \n    });\n});\n\n\napp.get('/aaFullData',  function(req, res) {\n    //res.send('<h3>this is the page for my sensor data</h3>');  \n    // Connect to the AWS RDS Postgres database\n// var templateVariables= {};\n\nconst client = new Client(db_credentials);\nclient.connect();\n\n    var thisQuery = \"SELECT DISTINCT latitude, longitude, address FROM aaallmeetings ;\";\n    client.query(thisQuery, (err, results) => {\n        if (err) {throw err}\n        else {\n            const data = results.rows;\n            // console.log(data)\n              client.end();\n              return res.json(data);\n            // start leaflet js\n            // fs.readFile('./aa.hbs', 'utf8', (error, myData) => {\n            //     var template = handlebars.compile(myData, data)\n            //     // console.log(templateVariables)\n            //     templateVariables.blockofMeetings = data;\n            //     templateVariables.myData = JSON.stringify(data);\n            //     //console.log(templateVariables)\n            //     var html = template(templateVariables)\n            //     res.send(html)\n            // })\n        \n        }\n        \n    });\n});\n\n\n// app.get('/sensor', function(req, res1) {\n//     var templateVariables= { title: 'My Sensor Data', body: 'These are my temperatures in my room'};\n//         //res.send('<h3>this is the page for my sensor data</h3>');  \n        \n//     // Connect to the AWS RDS Postgres database\n//     const client = new Client(db_credentials);\n//     client.connect();\n    \n//     var thisQuery = \"SELECT * FROM sensorData;\";\n//     client.query(thisQuery, (err, res) => {\n//         if (err) {throw err}\n//         else {\n            \n//             fs.readFile('./sensor.html', 'utf8', (error, data) => {\n//                 var template = handlebars.compile(data)\n//                 //console.log(templateVariables)\n//                 templateVariables.temperatures = res.rows;\n//                 //console.log(templateVariables)\n//                 var html = template(templateVariables)\n//                 res1.send(html)\n//             // //console.table(res.rows);\n//             // var rows= JSON.stringify(res.rows)\n//             // res1.send(`<p> Rows ${rows} </p>`); \n//             //\n            \n//             client.end();\n//         });\n//          client.end();\n//         }\n//     });\n\n// });\n\n//dear_diary query\napp.get('/processBlog', function(req, res1) {\n    \n var templateVariables= {};\n \n    var params = {\n        TableName : \"Dear_Diary\",\n        KeyConditionExpression: \n        \"#tp = :topicName and dt between :minDate and :maxDate\", // the query expression\n        ExpressionAttributeNames: { // name substitution, used for reserved words in DynamoDB\n            \"#tp\" : \"topic\"\n        },\n        ExpressionAttributeValues: { // the query values\n            \":topicName\": { S: \"Data Structures Homework\"},\n            \":minDate\": {S: new Date(\"September 26, 2019\").toLocaleString()},\n            \":maxDate\": {S: new Date(\"September 28, 2019\").toLocaleString()}\n        }\n    };\n    dynamodb.query(params, function(err, data2) {\n      if (err) {\n        console.error(\"Unable to query. Error:\", JSON.stringify(err, null, 2));\n      } else {\n             \n             fs.readFile('./pblog.hbs', 'utf8', (error, data) => {\n                var template = handlebars.compile(data)\n                //console.log(templateVariables)\n                templateVariables.blogPost = data2.Items\n                console.log(templateVariables)\n                var html = template(templateVariables)\n                res1.send(html)\n            })\n         \n        // console.log(\"Query succeeded.\");\n        // res1.send(JSON.stringify(data.Items, null, 4));\n        // .forEach(function(item) {\n        //   console.log(\"***** ***** ***** ***** ***** \\n\", item);\n        // });\n      }\n    });\n\n});\n\n// serve static files in /public\napp.use(express.static('public'));\n\n// listen on port 8080\napp.listen(8080, function() {\n    console.log('Server listening...');\n});","undoManager":{"mark":-2,"position":1,"stack":[[{"start":{"row":131,"column":0},"end":{"row":131,"column":1},"action":"remove","lines":[" "],"id":2},{"start":{"row":130,"column":17},"end":{"row":131,"column":7},"action":"remove","lines":["","       "]}],[{"start":{"row":132,"column":0},"end":{"row":132,"column":1},"action":"remove","lines":[" "],"id":3},{"start":{"row":131,"column":9},"end":{"row":132,"column":7},"action":"remove","lines":["","       "]}]]},"ace":{"folds":[],"scrolltop":2242.5,"scrollleft":90,"selection":{"start":{"row":131,"column":9},"end":{"row":131,"column":9},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":139,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1575342290804}